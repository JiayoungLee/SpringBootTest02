============= day_01 ===========
知识回顾
	Spring
		ioc、aop（oop）、事务、mvc
准备工作
	环境
		java：jdk8
		ied：idea
		maven：3.x
		mysql：5.x
		代码管理：git（github、码云）
	常用软件：
		浏览器：firefox、chrome
		文本编译器：noted++
		测试工具：postman
	常用的网址
		maven：https://mvnrepository.com
		码云: https://gitee.com/

Spring Boot 基础介绍
	spring boot 不是一个新的框架，基于spring 4.0，就像maven 一样，它整合了大量主流的第三方框架，形成的一套“快速开发的框架”；
	特性
		快速开发；
		pom，以 starter 形式，按照组类聚了多个jar，形成单条依赖，以父子继承的方式，实现 jar 版本的控制；
		“习惯优于配置”，简化了配置，没有web.xml
		注解开发
		内嵌式的servlet容器，无需外置容器
		监控的方便性
	why？
		配置、编码、部署变得简单
	mvc、boot、cloud
		mvc：spring web框架，
		boot：集成了 mvc、垂直的框架大集成者；
		cloud：分布式应用的大集成者，三维立体的，每一个应用基于 boot；

常用的注解
	spring
		@SpringBootApplication：启动boot 项目
		@Configuration：配置类注解 ---- <beans></beans>；
		@Bean：注册 bean 注解 ---- <bean></bean>；
		@PropertySource ---- 绑定配置文件；
		@ConfigurationProperties ---- 设置配置类属性
		@Value：读取配置文件 || 读取配置文件属性；
		@Component：注册 spring 组件；
		@Autowired ---- 按照 bean 的类型组装 Bean
		@Resource ---- 按照 Bean 的名字组装 Bean；
		@Aspect（@Bedore、@Aroud、@After、@PointCut、@Oder） ----- Aop 注解
		@Transational ---- 事务注解
		@WebFilter     ---- 过滤器
		@Controller（RestControler） ----- 控制层注解
			@RequestMapping、@GetMapping、@PostMapping、@PutMapping、@DeleteMapping || consumes（进入控制器的数据类型）、produces（控制器输出的数据类型）
				application/json
				application/x-www-form-urlencoded
			@PathVariable ---- 接受路径参数
			@RequestParam ---- 接受查询参数（如访问路径问号后面的参数）
			@RequestBody ---- 接受json参数
			@ModelAttribute ---- 接受form表单数据
			
		@Service ----- 服务层注解
		@Repository ---- 持久层注解
	---------------------------
	mybatis
		@Mapper ---- @MapperScan + @Repository
		@Select、@Insert、@Update、@Delete
		@Results
	---------------------------
	jpa
		@Entity ---- 指明实体 bean
		@Table ---- 映射到数据库中的表
		@Id ---- 对应表中 primary key
		@GeneratedValue ---- strategy = GenerationType.IDENTITY -----主键生成策略
		@Column ---- 映射到表中的列
		@Transient ---- 实体 bean 的属性不参与到数据库的映射
		@OneToOne
			OneToOne：一对一关系中，一方使用 JoinColumn 注解（有外键），另一方使用 mappedBy 属性（可选）
			cascade：联级操作
			fetch：加载数据策略
			JsonIgnore：不序列化该字段，避免无限递归
		@OneToMany
			OneToMany：多方使用 joinClumn，创建外键，一方使用 mappedBy 属性
		@ManyToOne
			@JoinColumn
				insertable、updatable：标识该属性是否参与插入和更新插入
		@ManyToMany
			@JoinTable ---- 中间表
		@Query
搭建 Spring Boot 框架
	folder、source folder、resource folder、package 四者的区别
	规范性：结构清晰、缩进清晰、命名清晰、逻辑清晰
	
配置文件
	种类：
		bootstrap.property(yml) ---- 父上下文配置
		application.property（yml） ---- 全局配置文件
		其他配置文件：log
	优先级
		相同位置，property > yml
		不同的位置
			外置 /config/application.property(yml)
			外置 /application.property(yml)
			内置 /config/application.property(yml)
			内置 /application.property(yml)
	读取
		全局配置文件： @Value 读取配置文件中的值
		
logback 日志系统
	步骤一：pom导入相关 jar ---- 已经引入，无需手动添加
	步骤二：配置
		特有配置文件 ---- logback-dev.xml
		全局配置文件
			# for log
			logging.config=classpath:config/logback-dev.xml
		配置类
	步骤三：应用
		
	
作业
	创建一个 spring boot 项目，提交到远程代码仓库。 ----- 各位远程代码仓库的地址
	完成配置文件读取，以接口的方式运行出来
	加入logback日志系统
	思考题：如何将 spring boot 项目打包成 war，部署到外置 tomcat 项目，并运行成功
	
============= day_02 ===========
多环境的配置
	三个环境：dev（for 开发人员）、staging（for 测试人员）、live（生产环境）
	application-{profile}.properties ---- {profile}：环境占位符
		全局配置：apllication.properties
		dev环境配置：apllication-dev.properties
		live环境配置：apllication-live.properties
		
	步骤一：pom引入 jar ---- spring 自带功能，无需引入
	步骤二：配置
		新建dev、live 环境的 log 配置，修改日志级别；
		新建spring dev、live的配置文件，分别指向不同的log配置文件；
		全局配置中引入环境配置：spring.profiles.active=dev
	步骤三：应用
		修改全局配置中环境设置，调用log接口，查看日志输出是否正确
		
热部署配置
	步骤一：导入jar
		<!-- spring dev tools -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	步骤二：配置
		application.properties
			# for dev tools
			spring.devtools.restart.enabled=true
			spring.devtools.restart.additional-paths=src/main/java
	步骤三：应用
		修改java代码，查看是否热部署成功
		
http & https 配置
	http: 超文本传输协议，默认端口 80，数据不安全；
	https：安全的超文本传输协议，默认端口 443，数据是安全的 ssl证书；
	SSL ---- CA 颁发证书
		域名型的：信任级别比较低的；
		企业级别的：信任级别中等；
		增强型证书：信任级别最高
		------------------
		获取证书的途径
			网上购买
			手动生成：keytool -genkey -alias tomcat -keyalg RSA
	步骤一：pom引入jar ---- 无需引入；
	步骤二：配置
		application.properties
			# for ssl
			server.ssl.key-store=classpath:.keystore
			server.ssl.key-store-password=111111
		配置类
			
	步骤三：应用
		直接访问 http https
		
Mybatis
	步骤一：引入jar
		数据库、连接池、mybatis、分页插件
		<!-- mybatis -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.0</version>
        </dependency>
        <!-- pageHelper -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.12</version>
        </dependency>
	步骤二：配置
		application.xml
			# for data source
			# mysql 5
			spring.datasource.driver-class-name=com.mysql.jdbc.Driver
			# mysql 6 +
			#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
			spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
			spring.datasource.username=root
			spring.datasource.password=root

			# hikari pool
			spring.datasource.hikari.maximum-pool-size=20
			spring.datasource.hikari.minimum-idle=5
			spring.datasource.hikari.idle-timeout=180000
			spring.datasource.hikari.auto-commit=true

			# for mybatis
			mybatis.configuration.map-underscore-to-camel-case=true
			#mybatis.type-aliases-package=com.hqyj.SpringBootDemo.modules.*.entity
			#mybatis.mapper-locations=classpath:mapper/*Mapper.xml
		步骤三：应用
			创建 表、entity
			“控制器”拆分的思想
				模块控制器：页面的跳转；
				entity控制器：数据的处理，形成接口；
			书写流程：dao --- service ---- controller
			组合查询，通过设置results结果集，将关联id做两次映射，相当于调用两个接口并组合结果集
			分页查询：使用 pageHelp 插件进行分页
			
RESTful规则
	书写规则
		URI结尾不应包含（/）；
		正斜杠分隔符（/）必须用来指示层级关系；
		应使用连字符（ - ）来提高URI的可读性；
		不得在URI中使用下划线（_）；
		URI路径中全都使用小写字母；
	命名规则
		单资源 ---- URL中不要Get、Update等字样，通过请求类型控制
			GET /api/user；
			POST /api/user；
		单资源带id
			GET /api/user/1；
			POST /api/user/1；
			POST /order/{id}/name ---- 重命名；
			POST /order/{id}/status ---- 修改状态；
		复数资源：GET /api/users；
		复数资源查找
			GET /api/users/search?name=123；
			GET /api/users/searchByName?name=123；
		嵌套资源
			GET /api/teams ---- 团队列表；
			GET /api/teams/123 ---- ID 为 123 的团队；
			GET /api/teams/123/members ---- ID 为 123 的团队下的成员列表；
			GET /api/teams/123/members/456 ---- ID 为 123 的团队下 ID 未 456 的成员；
			
			
	作业
		多环境配置
		http & https 配置
		getCitiesByCountryId
		getCitiesBySearchVo
		getCountryByCountryId
		getCountryByCountryName
		
	作业回顾
		只提交 pom src下面的内容
				
============= day_03 ===========
Mybatis
	应用
		脚本多条件查询
		新增接口
		修改接口
		删除接口
		
Git 命令运用

Spring Data Jpa
	简介
		sun 公式定制的 ORM 的一套规范，自己并没有实现；
		hibernate、openJpa…… 其中 hibernate 性能最好，我们在项目中引入 jpa，实际引入 hibernate 相关的 jar
		Jpa：思想是少写 sql、或不写sql，基于这套理念，它封装了一套语法，使用 “注解” 的方式实现 “实体bean” 的关系（一对一、一对多、多对多），也正是因为这样，我们定义的 bean 会变变得复杂，对于比较复杂的业务逻辑来说，很容造成实体 bean 之间的循环调用；
	步骤一：pom导入相关
		<!-- jpa -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
	步骤二：配置
		application.properties
			# for jpa
			# validate\create\create-drop\update
			spring.jpa.hibernate.ddl-auto=update
			spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
			spring.jackson.serialization.fail-on-empty-beans=false
			spring.jpa.show-sql=true
			spring.jpa.properties.hibernate.format_sql=true
			logging.level.org.hibernate.SQL=DEBUG
			logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace
	步骤三：应用
		repository ---- service ---- controller
		创建实体 bean
		自动生成表
		jpa 父接口
		
	作业
		mybatis 脚本查询、增删改
		jpa 自动生成表、父接口运用
		思考题：
			jpa自动生成表，如何保证 bean 属性的顺序 和 生成的表的列顺序 一致
			    顺序不一致的原因：hibernate里面在corejar包下的  org.hibernate.cfg下的PropertyContainor类装
			数据用的TreeMap（无序的）
			    解决：把该类里面的全部TreeMap替换成LinkedHashMap即刻
		
		
============= day_04 ===========
Jpa
	父接口应用
		分页带条件查询
			findall（）
			findall（sort）
			findall（pageable）
			findall（example， pageable） ---- 带条件分页查询，需要给定一个模版，按照模版封装的内容进行查询

	属性查询
		接口方法命名：findBy + Top || First（option） + 属性 + 关键字 + 属性（option）
			查询关键字列表
			And ---- findByLastnameAndFirstname ---- … where x.lastname = ?1 and x.firstname = ?2；
			Or ---- findByLastnameOrFirstname ---- … where x.lastname = ?1 or x.firstname = ?2；
			Is,Equals ---- findByFirstname,findByFirstnameIs,findByFirstnameEquals ---- … where x.firstname = ?1；
			Between ---- findByStartDateBetween ---- … where x.startDate between ?1 and ?2；
			LessThan ---- findByAgeLessThan ---- … where x.age < ?1；
			LessThanEqual ---- findByAgeLessThanEqual ---- … where x.age <= ?1；
			GreaterThan ---- findByAgeGreaterThan ---- … where x.age > ?1；
			GreaterThanEqual ---- findByAgeGreaterThanEqual ---- … where x.age >= ?1；
			After ---- findByStartDateAfter ---- … where x.startDate > ?1；
			Before ---- findByStartDateBefore ---- … where x.startDate < ?1；
			IsNull ---- findByAgeIsNull ---- … where x.age is null；
			IsNotNull,NotNull ---- findByAge(Is)NotNull ---- … where x.age not null；
			Like ---- findByFirstnameLike ---- … where x.firstname like ?1；
			NotLike ---- findByFirstnameNotLike ---- … where x.firstname not like ?1；
			StartingWith ---- findByFirstnameStartingWith ---- … where x.firstname like ?1 (parameter bound with appended %)；
			EndingWith ---- findByFirstnameEndingWith ---- … where x.firstname like ?1 (parameter bound with prepended %)；
			Containing ---- findByFirstnameContaining ---- … where x.firstname like ?1 (parameter bound wrapped in %)；
			OrderBy ---- findByAgeOrderByLastnameDesc ---- … where x.age = ?1 order by x.lastname desc；
			Not ---- findByLastnameNot ---- … where x.lastname <> ?1；
			In ---- findByAgeIn(Collection<Age> ages) ---- … where x.age in ?1；
			NotIn ---- findByAgeNotIn(Collection<Age> ages) ---- … where x.age not in ?1；
			True ---- findByActiveTrue() ---- … where x.active = true；
			False ---- findByActiveFalse() ---- … where x.active = false；
			IgnoreCase ---- findByFirstnameIgnoreCase ---- … where UPPER(x.firstame) = UPPER(?1)；
		自定义查询
			sql ---- select * from h_student where student_id = ?
			hql ---- select studentId, studentName from Student where studentId = ?
				使用 “类名” 代替 “表名”，使用 “类名.属性名” 代替 “列名”；
				没有 * 查询；
				传参方式
					1、?index 的方式，index 顺序和方法参数顺序一致，从 1 开始：
						@Query(value = "select s from Student s where s.studentName = ?1 and s.studentCard.cardId = ?2")
			JPql ---- 实际上 hql 类似；


	作业
		jpa 实现
			父接口查询
			属性查询
			自定义查询


============= day_05 ===========
持久层
	关系型数据库：mysql、sql server、oracle
	非关系型数据库：
		内存性数据库：redis
		文件形数据库：MongoDB
Redis
	redis 安装简介，参考笔记内容
	步骤一：pom引入jar
		<!-- redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- pool -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
	步骤二：配置
		application.perperties
			# for Redis
			spring.redis.database=0
			spring.redis.host=127.0.0.1
			spring.redis.port=6379
			spring.redis.password=111111
			spring.redis.timeout=300

			# for Lettuce
			spring.redis.lettuce.pool.max-active=8
			spring.redis.lettuce.pool.max-wait=10000
			# 连接池中最大的空闲连接数
			spring.redis.lettuce.pool.max-idle=8
			# 连接池中最小连接数
			spring.redis.lettuce.pool.min-idle=0
			# 关闭超时时间
			spring.redis.lettuce.shutdown-timeout=100
		配置类 RedisConfig
			思路
				重写redis存储数据 key 、value 的序列化方式
				重写缓存管理
				重写缓存 key
	步骤三：应用
		封装一个工具类，RedisUtils
			封装各种数据类型的操作，包装了类似的代码 opsFore***
			数据操作进行异常捕获
		service 层 || dao 层进行 redis 数据操作，其余不变；

事务的处理
	java 错误和异常
		Throwable
			Error
			Exception   <--
				IOException
				RunTimeException    <--
	事务 遇到Error 或者 RunTimeException 才会起作用（回滚）
    @Transactional(noRollbackFor = ArithmeticException.class)   //遇到算术异常不会回滚
	java.lang.ArithmeticException: / by zero

Thymeleaf
	简介
		动静结合：
		多方言的开箱即用
		与spring boot 的结合紧密
	步骤一：pom引入jar
		<!-- thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
	步骤二：配置
		application.properties
			# thymeleaf
			spring.thymeleaf.cache=false
			spring.thymeleaf.enabled=true
			spring.thymeleaf.encoding=UTF-8
			spring.thymeleaf.mode=HTML5
			spring.thymeleaf.prefix=classpath:/templates/
			spring.thymeleaf.suffix=.html
	步骤三：应用
		/templates/创建前端页面
		控制器返回页面对应的路径

页面的模块化、碎片化思想
	模块化：将业务逻辑分成不同的模块，前后端代码均按照模块来处理；
	碎片化：
		后台管理系统主页 ---- header.html + sidbar.html + footer.html + content.html
		登录和注册页面 ----- 页面布局页面 + content.html
		???????????????
		碎片由谁来进行组装？
		控制器返回到哪个页面？
		碎片组装器：index.html、indexSimple.html
		控制器包装不同页面的路径到template变量中，返回碎片组装器，由碎片组装器组装碎片，并渲染不同的页面；

Thymeleaf 标签运用

作业
	redis
	thymeleaf



============= day_06 ===========
过滤器
	servlet的核心接口，实现 Filter 的接口
	需求：过滤掉请求参数中 “fuck” 字符串
	步骤一：pom 导入 jar ---- 无需导入 jar
	步骤二：配置
		application.properties ---- 无需配置
		创建过滤器，并将该过滤器注册到容器里面 ---- WebMvcConfig
			FilterRegistrationBean 注册写好的过滤器
	步骤三：应用
		书写过滤器的业务逻辑
		调用接口进行测试

拦截器
	和过滤器的区别
		拦截器能够调用容器中的 bean
		过滤器能实现的功能，拦截器依然能够实现
		拦截器只能对 控制器 起作用，过滤器对 request response对象进行处理
	需求：设置一个拦截器，通过请求 path 路径，定位访问页面的文件，每个控制器直接返回外层碎片组装器，设置 template 的代码移植到拦截器完成；
		127.0.0.1/test/index --- 请求路径
		\test\index.html ---- 请求访问页面路径
	步骤一：引入jar ---- spring提供功能，无需引入额外jar
	步骤二：配置
		书写一个拦截器；
		将该拦截器注册到容器中
	步骤三：应用
		书写拦截器业务逻辑代码
		重构控制器，进行测试

AOP编程
	需求：在控制层以log的方式记录request相关信息
	步骤一：导入jar ---- 无需导入
	步骤二：配置
		书写切面程序
	步骤三：应用
		书写切面业务逻辑，调用接口进行测试

	==========
	1、切面类上使用@Aspect
	2、切入的位置@Pointcut
		包路劲表达式的方式
		注解的方式 --- @Transactional
	3、通知程序
		before、after、around


	
		
============= day_07 ===========
文件上传
	步骤一：导入jar ---- 无需导入 jar
	步骤二：配置
		application.properties
			# for upload file size
			spring.servlet.multipart.maxFileSize=-1
			spring.servlet.multipart.maxRequestSize=-1
	步骤三：应用
		页面书写文件上传框

文件下载
	步骤一：导入 jar ---- 无需导入；
	步骤二：配置 ---- 无需配置；
	步骤三：应用
		设置响应头
			Content-Type: application/octet-stream
		下载文件当前页面无刷新

		文件下载控制器
			控制器无返回，文件内容以流的方式传输给客户；
			控制器返回 ResponseEntity 对象

		页面上需要下载链接


监控端点
	步骤一：导入jar
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
	步骤二：配置
		# 修改 actuator 端口
		management.server.port=9001
		# 修改访问路径 ---- 2.0之前默认是/ ---- 2.0默认是/actuator
		management.endpoints.web.base-path=/monitor
		# 开启其他端点
		management.endpoints.web.exposure.include=env,beans
		# 开启所有端点
		management.endpoints.web.exposure.include=*
		# 排除某些端点
		management.endpoints.web.exposure.exclude=env,beans
		# health 端点在默认情况下，仅显示 "status": "UP"，显示health详细信息
		management.endpoint.health.show-details=always
		# 配置开启或关闭多个端点
		management.endpoints.enabled-by-default=false
		# 配置某个端点开启或关闭
		management.endpoint.shutdown.enabled=true
	步骤三：应用
		auditevents ---- 显示当前应用程序的审计事件信息；
		caches ---- 显示可用缓存信息；
		conditions ---- 显示自动装配类的状态及及应用信息；
		configprops ---- 显示所有 @ConfigurationProperties 列表；
		env ---- ConfigurableEnvironment 中的属性；
		health ---- 显示应用的健康信息（未认证只显示status，认证显示全部信息详情）；
		info ---- 显示任意的应用信息；
		metrics ---- 查看应用基本指标列表；
		mappings ---- 显示所有 @RequestMapping 路径集列表；
		scheduledtasks ---- 显示应用程序中的计划任务；
		shutdown ---- 允许应用以优雅的方式关闭（默认情况下不启用）；
		threaddump ---- 执行一个线程dump；
		httptrace ---- 显示HTTP跟踪信息（默认显示最后100个HTTP请求 - 响应交换）；
		heapdump ---- 返回一个GZip压缩的hprof堆dump文件；


============= day_08 ===========
计算机编码
	编码是个令人头疼的问题！
	ASCII
	计算机只能处理数字，文本或其他内容，首先要转化为数字；
	计算机采用8个bit（bit）作为一个字节（byte），一个字节表示的最大整数是255（二进制的 8bit 最大为11111111，转化为十进制 255），想要表示更大的整数，就必须用多个字节，两个字节可以表示的最大整数是 65535，4 个字节可以表示的最大整数是 4294967295；
	最早只有128（0-127）个符号编到计算机里（大小写英文字母、数字和一些符号），这个编码表被称为 ASCII 编码，比如大写字母 A 的编码是 65，小写字母 z 的编码是 122；
	各国指定了各自的编码规范：中国（GB2312）、日本（Shift_JIS）、韩国（Euc-kr）……世界上有上百种语言，每种规范还不能和ASCII冲突，将这些规范混在文本中，乱码就产生了；
	Iso-8859-1
	单字节编码，和 Ascii 编码相似，最多能表示的字符范围是 0-255，应用于英文系列，很明显，iso-8859-1 编码表示的字符范围很窄，无法表示中文字符，但是，由于是单字节编码，和计算机最基础的表示单位一致，所以很多时候，仍旧使用 iso-8859-1 编码来表示，而且在很多协议上，默认使用该编码；
	Unicode
	为了解决乱码问题，Unicode应运而生，Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了，但是，ASCII编码是1个字节，而Unicode编码通常是2个字节，在存储和传输上就十分不划算；
	UTF-8
	为了解决Unicode存储空间的问题，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码，UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节，如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间；
	UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作；
	在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码；
	Base64
	Base64就是一种基于64个可打印字符来表示二进制数据的方法，要求把每三个8Bit的字节转换为四个6Bit的字节（3*8 = 4*6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3；
	使用场景
	电子邮件中不能直接使用非ASCII码字符传输数据，所以使用base64进行编码后传输，因为base64的64个字符肯定有对应的ascii编码；
	保存图片：图片数据归根到底还是一堆二进制串，用base64编码后的显示成的字符串可以存到数据库；
	请不要再叫base64加密，请叫base64编码；

    页面模板的拆解
    		两个碎片组装器


============= day_09 ===========
ajax
	是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术；
	参数
	async：默认值: true。默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false；
	beforeSend(XHR)：发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头；
	cache：默认值: true，dataType 为 script 和 jsonp 时默认为 false。设置为 false 将不缓存此页面；
	complete(XHR, TS)：参数： XMLHttpRequest 对象和一个描述请求类型的字符串；
	contentType：默认值: "application/x-www-form-urlencoded"。发送信息至服务器时内容编码类型；
	context：这个对象用于设置 Ajax 相关回调函数的上下文；
	data：发送到服务器的数据；
	dataFilter：给 Ajax 返回的原始数据的进行预处理的函数；
	dataType：预期服务器返回的数据类型；
	"xml": 返回 XML 文档，可用 jQuery 处理；
	"html": 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行；
	"script": 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 "cache" 参数；
	"json": 返回 JSON 数据；
	"jsonp": JSONP 格式。使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数；
	"text": 返回纯文本字符串；
	error
	自动判断 (xml 或 html)。请求失败时调用此函数；
	global：是否触发全局 AJAX 事件；
	success：请求成功后的回调函数；
	======================================
	// json提交
	var resource = {};
	resource.resourceName = $("[name=resourceName]").val();
	resource.resourceUrl = $("[name=resourceUrl]").val();
	resource.resourceDescription = $("[name=resourceDescription]").val();
	var roles = new Array();
	$.each($("input[name='roleCheckbox']"), function(){
		if(this.checked){
			var role = {};
			role.roleId = $(this).val();
			roles.push(role);
		}
	});
	resource.roles = roles;
	var user = {};
	user.account = $("[name='account']").val();
	user.password = $("[name='password']").val();
	user.rememberMe = $("[name='rememberMe']").prop('checked');
	$.ajax({
		url : "/doLogin",
		type : "post",
		contentType: "application/json",
		data : JSON.stringify(user),
		success : function (data) {
			if (data.status == 200) {
				location.href = "/index";
			} else {
				layer.msg(data.message, {icon: 0});
			}
		},
		error : function (data) {
			layer.msg(data.responseText, {icon: 0});
		}
	});
	// form提交
	$.ajax({
		url :"/organization/addDepartment",
		type : "POST",
		data : $('#form1').serialize(),
		dataType : "text",
		success : function(data) {
			var result = eval("(" + data + ")");
			if (result.status == 200) {
				layer.msg("修改成功",{
					icon : 1,
					time: 500,
				},function () {
					var index = parent.layer.getFrameIndex(window.name);
					parent.location.reload();
					parent.layer.close(index);
				});
			} else {
				layer.msg(result.message, {icon: 0});
			}
		},
			error : function() {
				layer.msg('无法连接服务器', {icon: 2});
			}
		});
		return false;
	});



登录、注册页面
	后台：dao ---- service ---- controller ----- 接口测试
	前端：页面 ---- js
	-------------------------
	/account/login ---- 登录页面
	/account/register ---- 注册页面
	/api/user ---- post     插入
	/api/login ---- post
	/api/users ---- post    查找全部users  分页
	/api/user ---- put      修改user
	/api/user/{userId} ---- get         查找user byId
	/api/user/{userId} ---- delete      删除user byId

============= day_10 ===========
============= day_11 ===========
table 页
	开发 table 页后台接口
		dao ---- service ---- controller ---- 接口测试
	书写 table 页
		页面伪代码 ---- 页面跳转控制器 ---- 保证页面跳转okay
	table 页的功能点
		表格渲染
			html 从模版拷贝
			jquery datatable
				ajax 属性配置 "ajax": function (data, callback, settings)
					data包装表格数据，通过浏览器页面js调试，获取data属性 ---- 分页起始index、排序、关键字查询等信息 ----- 包装 searchvo 对象
					callback 回调函数，将表格数据传入，渲染表格
				自定义 ajax ---- 请求后台接口，返回数据
					定义2种数据结构：行数据结构（要显示的列 + 操作列）、表格数据结构（数据count、当前页需要显示的list（包装的行数据结构））
			测试：分页、keyword查询、排序
		新增
			bootstrap 模态框
				button || a 等 ---- data-toggle="modal" data-target="#addUserModal"
				模态框的 div ---- header + body + footer
			事件驱动
				点击新增按钮 ---- 初始化模态框的值（置空intput框 + 初始化 roles checkbox）
				模态框上点击save changes ---- 获取模态框表单输入的值，ajax 提交后台接口 新增 ---- 关闭模态框 ---- 重新渲染 table
		修改
			事件驱动
				操作列 update a标签 ---- 打开模态框、初始化模态框数据（当前 userId 获取 user 数据，渲染到模态框上）
				模态框上 save changes 按钮 ---- 获取模态框表单输入的值，ajax 提交后台接口 修改 ---- 关闭模态框 ---- 重新渲染 table
		删除
			事件驱动
				点击操作列上 删除 a标签 ---- 调用 js 函数，删除当前user ---- 重新渲染 table

profile 页面
	静态资源文件配置
		步骤一：pom导入jar ---- 无需导入新的jar
		步骤二配置：配置
			application.properties
				# spring local resource config
				# 应用指定的 “相对路径”
				spring.resource.path=/upload/
				spring.resource.path.pattern=/upload/**
				# 本地指定的 “绝对路径”，和相对路径映射
				spring.resource.folder.windows=d:/upload/
				spring.resource.folder.linux=/upload/
			配置类 WebMvcConfig implements WebMvcConfigurer
				重写 addResourceHandlers 方法
		步骤三：应用并测试
			使用 test 模块 上传文件进行测试

	准备 profile 页面

vue MVC模式中的V:分为MVVM模式modal、view、view-modal、modal

============= day_12 ===========
shiro
    步骤一：pom导入jar ---- 无需导入新的jar
    步骤二：配置
    	1、application.properties
             #开启shiro
             shiro.web.enabled=true
        2、realm  java类配置MyRealm
        3、ShiroConfig 类似有之前的shiro.xml文件


	身份验证过程
		用户登录 ---- 包装令牌（用户名、密码、记住我） ---- subject 调用 realm，包装身份验证器 ---- 身份验证器和令牌做比对（用户名和密码的比对）
	资源授权流程
		用户登录 ----- subject调用 checkroles（） ---- 跳转页面 ---- 当页面有 shiro 标签 或者方法上有 shiro 注解时候 ---- 调用 realm 里面的资源授权器 ---- 资源授权器和标签或注解上的内容做比对

    记住我：
    去掉jsession



============= day_13 ===========
异常的统一处理  -- 指定某种异常跳转到指定页面
    准备错误页面
    书写controller
        ExceptionHandlerController控制器类，用@ControllerAdvice（全局）注解该类
        书写局部的controller方法，用@ExceptionHandler（局部，针对什么类型异常）注解

文件导出
    工具类
    entity
    controller
    前端页面“导出”按钮

Jackson
    Java对象 转化为 JSON字符串，也能JSON字符串 转化为 Java对象
		
		